-- MySQL Script generated by MySQL Workbench
-- ter 04 out 2022 14:57:55
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema marvel
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema marvel
-- -----------------------------------------------------
CREATE DATABASE `marvel`;
USE `marvel` ;

-- -----------------------------------------------------
-- Table `marvel`.`genero`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `marvel`.`genero` (
  `idgenero` INT NOT NULL AUTO_INCREMENT,
  `nomegenero` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idgenero`))
ENGINE = InnoDB;

INSERT INTO `genero` (`idgenero`, `nomegenero`) VALUES 
  (1, 'ação, aventura, ficção científica e fantasia'), 
  (2, 'ação, guerra, aventura, ficção científica e suspense'), 
  (3, 'ação, comédia, aventura, ficção científica e fantasia');

-- -----------------------------------------------------
-- Table `marvel`.`filmes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `marvel`.`filmes` (
  `idfilmes` INT NOT NULL AUTO_INCREMENT,
  `nomefilme` VARCHAR(45) NOT NULL,
  `aprovacao` VARCHAR(45) NOT NULL,
  `cronologia` VARCHAR(45) NOT NULL,
  `idgenero` INT NOT NULL,
  PRIMARY KEY (`idfilmes`),
  INDEX `fk_filmes_genero1_idx` (`idgenero` ASC),
  CONSTRAINT `fk_filmes_genero1`
    FOREIGN KEY (`idgenero`)
    REFERENCES `marvel`.`genero` (`idgenero`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

INSERT INTO `filmes` (`idfilmes`, `nomefilme`, `aprovacao`, `cronologia`, `idgenero`) VALUES 
  (1, 'Homem-Aranha: Sem Volta para Casa', '98%', '27º', '3'), 
  (2, 'Capitão América: O Primeiro Vingador', '75%', '1º', '2'), 
  (3, 'Thor: Ragnarok', '87%', '20º', '3');

-- -----------------------------------------------------
-- Table `marvel`.`ator`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `marvel`.`ator` (
  `cpf` VARCHAR(45) NOT NULL,
  `nomeator` VARCHAR(45) NOT NULL,
  `genero` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`cpf`))
ENGINE = InnoDB;

INSERT INTO `ator` (`cpf`, `nomeator`, `genero`) VALUES 
  ('111.111.111-11', 'Chris Hemsworth', 'M'), 
  ('222.222.222-22', 'Tom Holland', 'M'), 
  ('333.333.333-33', 'Chris Evans', 'M');

-- -----------------------------------------------------
-- Table `marvel`.`diretor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `marvel`.`diretor` (
  `iddiretor` INT NOT NULL AUTO_INCREMENT,
  `nomediretor` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`iddiretor`))
ENGINE = InnoDB;

INSERT INTO `diretor` (`iddiretor`, `nomediretor`) VALUES 
  (1, 'Taika Waititi'), 
  (2, 'Joe Johnston'), 
  (3, 'Jon Watts'),
  (4, 'Cate Shortland');

-- -----------------------------------------------------
-- Table `marvel`.`elenco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `marvel`.`elenco` (
  `idfilmes` INT NOT NULL,
  `cpf` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idfilmes`, `cpf`),
  INDEX `fk_filmes_has_ator_ator1_idx` (`cpf` ASC),
  INDEX `fk_filmes_has_ator_filmes_idx` (`idfilmes` ASC),
  CONSTRAINT `fk_filmes_has_ator_filmes`
    FOREIGN KEY (`idfilmes`)
    REFERENCES `marvel`.`filmes` (`idfilmes`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_filmes_has_ator_ator1`
    FOREIGN KEY (`cpf`)
    REFERENCES `marvel`.`ator` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

INSERT INTO `elenco` (`idfilmes`, `cpf`) VALUES 
  ('2', '333.333.333-33'), 
  ('1', '222.222.222-22'), 
  ('3', '111.111.111-11');

-- -----------------------------------------------------
-- Table `marvel`.`filmes_diretor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `marvel`.`filmes_diretor` (
  `idfilmes` INT NOT NULL,
  `iddiretor` INT NOT NULL,
  PRIMARY KEY (`idfilmes`, `iddiretor`),
  INDEX `fk_filmes_has_diretor_diretor1_idx` (`iddiretor` ASC),
  INDEX `fk_filmes_has_diretor_filmes1_idx` (`idfilmes` ASC),
  CONSTRAINT `fk_filmes_has_diretor_filmes1`
    FOREIGN KEY (`idfilmes`)
    REFERENCES `marvel`.`filmes` (`idfilmes`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_filmes_has_diretor_diretor1`
    FOREIGN KEY (`iddiretor`)
    REFERENCES `marvel`.`diretor` (`iddiretor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

INSERT INTO `filmes_diretor` (`idfilmes`, `iddiretor`) VALUES 
  ('3', '1'), 
  ('2', '2'), 
  ('1', '3');


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- 1) O operador LIKE
-- Todos os atores com o nome iniciado por "C":

select ator.nomeator as "Ator/Atriz", elenco.cpf as "CPF" 
	from ator, elenco
		where ator.cpf = elenco.cpf and
        ator.nomeator LIKE 'C%';

-- 2) Operações com números (= ; != ; > ; < ; BETWEEN);

select ator.nomeator as "Ator/atriz", elenco.cpf as "CPF"
	from ator, elenco
		where 
			ator.cpf = elenco.cpf and
            ator.nomeator = 'Chris Evans';

select filmes.nomefilme as "Nome do filme", diretor.nomediretor as "Diretor"
  from filmes, diretor, filmes_diretor
    where 
      filmes.idfilmes = filmes_diretor.idfilmes and
        diretor.iddiretor = filmes_diretor.iddiretor and
            filmes.idfilmes = '2';
            
-- 3) Operações de agregação (COUNT(*); SUM(*); AVERAGE(*)) com agrupamento
-- Resultado: Dois filmes possuem o mesmo gênero
            
select genero.nomegenero as "Gênero do filme", count(*) as "Quantidade de filmes com o mesmo gênero"
	from genero, filmes
		where 
        genero.idgenero = filmes.idgenero 
			GROUP BY
			filmes.idgenero = '3';
        
-- 4) Operações de ordenação, com ou sem o LIMIT()

select filmes.nomefilme as "Filmes em ordem decrescente"
  from filmes, elenco
    where 
        filmes.idfilmes = elenco.idfilmes
          ORDER BY filmes.nomefilme DESC;

select filmes.nomefilme as "Filmes em ordem alfabética"
  from filmes, elenco
    where 
        filmes.idfilmes = elenco.idfilmes
          GROUP BY filmes.nomefilme ASC;

-- 5) Algum LEFT ou RIGHT JOIN

select diretor.nomediretor as "Diretor", filmes_diretor.idfilmes as "Produção"
	 from diretor 
		LEFT JOIN filmes_diretor
			ON diretor.iddiretor = filmes_diretor.idfilmes;
